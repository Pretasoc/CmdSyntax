% \iffalse meta-comment
%
% Copyright 2019 by Philemon Eichin
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Philemon Eichin.
%
% This work consists of the files cmdsyn.dtx and cmdsyn.ins
% and the derived file cmdsyn.sty.
%
% \fi
%
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[2005/12/01]
%<package>\ProvidesPackage{cmdsyn}
%<package>    [2019/08/07 v0.1 Initial Release]
%<*driver>
\documentclass{ltxdoc}
\usepackage{cmdsyn}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
    \DocInput{cmdsy.ltx}
\end{document}
%</driver>
% \fi
% \CheckSum{0}
% \CharacterTable
% {Upper-case \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
% Lower-case \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
% Digits \0\1\2\3\4\5\6\7\8\9
% Exclamation \! Double quote \" Hash (number) \#
% Dollar \$ Percent \% Ampersand \&
% Acute accent \’ Left paren \( Right paren \)
% Asterisk \* Plus \+ Comma \,
% Minus \- Point \. Solidus \/
% Colon \: Semicolon \; Less than \<
% Equals \= Greater than \> Question mark \?
% Commercial at \@ Left bracket \[ Backslash \\
% Right bracket \] Circumflex \^ Underscore \_
% Grave accent \‘ Left brace \{ Vertical bar \|
% Right brace \} Tilde \~}
% \changes{v0.1}{2019/08/07}{Initial development version}
% \GetFileInfo{cmdsyn.sty}
% \DoNotIndex{\#,\$,\%,\&,\@,\\,\{,\},\^,\_,\~,\ }
% \DoNotIndex{\@ne}
% \DoNotIndex{\advance,\begingroup,\catcode,\closein}
% \DoNotIndex{\closeout,\day,\def,\edef,\else,\empty,\endgroup}
% \title{The \textsf{cmdsyn} Package\thanks{This document corresponds to \textsf{cmdsyn}~\fileversion, dated~\filedate.}}
% \author{Philemon Eichin \texttt{p.eichin@phirsoft.com}}
%
% \maketitle
% \begin{abstract}
%   \textsf{cmssyn} is a package to document the command line interface of an application. You can define commands with its
%   parameters and document each parameter individually. The package suppors optional parameters as well as defaul values.
% \tableofcontents
% \section{Motivation}
% A couple of years ago, i just had started using \LaTeX, when i had to write a small program for my university job. Back then
% i thought, it would be a great idea, to write the documentation on how to use that program in \LaTeX. Since the application
% was a console application, i needed some way to describe all parameters and typeset a nice sample command line. Since i was
% unable to find a package for that purpose on CTAN, i decided to create a small set of commands for that task. I planned to
% publish theese set as a package, but i didn't knew how, and i had other stuff to do. I created a GitHub repository, but
% didn't even commit the source, before i forgot about that project.
% \par
% Recently when i was cleaning up my computer, i found that code file and decided to finally publish it.
%
% \section{Customize the formatting}
%    You can customize the formatting of a paramter, by providing a macro, that will typeset 
% \StopEventually
% {
%     \PrintChanges
%     \PrintIndex   
% }
% \section{Implementation}
% \subsection{Required Packages}
% Load the packages required by this package.
%    \begin{macrocode}
\usepackage{xparse}
\usepackage{xkeyval}
\usepackage{forloop}
%    \end{macrocode}
% \subsection{Declare counters}
%    Declare some counter to track the number of commands and parameters.
%    \begin{macrocode}
\newcounter{cmdsyn@env}
\newcounter{cmdsyn@env@cmd}
\newcounter{cmdsyn@cmd}
%    \end{macrocode}
% \subsection{Declare conditionals}
% Declare some if, that are used as properties of a parameter
%    \begin{macrocode}
\newif\ifcmdsyn@param@required
\newif\ifcmdsyn@param@namerequired
\newif\ifcmdsyn@param@shorpresent
%    \end{macrocode}
% The ifs, will store the following information:
% \begin{description}
%    \item[ifcmdsyn@param@required] Is set to \emph{true}, if the parameter is a mandatory parameter.
%        For an optional paramter the if is set to \emph{false}.
%    \item[ifcmdsyn@param@namerequired] Is set to \emph{true}, if
%    \item[\ifcmdsyn@param@shorpresent] Is set to \emph{true}, if there is an abbreviaton for the paramter.
% \end{description}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                 Keys                                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\define@boolkey[cmdsyn]{command}{required}{}
\define@boolkey[cmdsyn]{command}{nameRequired}[true]{}
\define@key[cmdsyn]{command}{name}[\undefined]{\def\cmdsyn@parname{#1}}
\define@key[cmdsyn]{command}{alias}[\undefined]{\def\cmdsyn@paralias{#1}}
\define@key[cmdsyn]{command}{short}[\undefined]{\def\cmdsyn@parshort{#1}}
\define@key[cmdsyn]{command}{default}[\undefined]{\def\cmdsyn@pardefault{#1}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                 Formatters                                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand\cmdysn@OptionalParameterFormat[1]{[#1]}%
\let\OptionalParameterFormat\cmdysn@OptionalParameterFormat%

\newcommand\cmdysn@OptionalParameterNameFormat[1]{[#1]}%
\let\OptionalParameterNameFormat\cmdysn@OptionalParameterNameFormat%

\newcommand\cmdysn@RequiredParameterFormat[1]{#1}%
\let\RequiredParameterFormat\cmdysn@RequiredParameterFormat%

\newcommand\cmdysn@RequiredParameterNameFormat[1]{#1}%
\let\RequiredParameterNameFormat\cmdysn@RequiredParameterNameFormat%

\newcommand\cmdysn@ShortParameterFormat[1]{%
\ifparametershortpresent%
\hspace{1ex}$\left<\right.$\textit{#1}$\left.\right>$%
\fi%
}%
\let\ShortParameterFormat\cmdysn@ShortParameterFormat%

\newcommand\cmdysn@commandFormat[1]{#1}
\let\commandFormat\cmdysn@commandFormat

\newcommand\cmdsyn@parameterFormat{%
\ifparameterrequired%
\RequiredParameterFormat{\formatparametername \ShortParameterFormat{\theparametershort}}%
\else%
\OptionalParameterFormat{\formatparametername \ShortParameterFormat{\theparametershort}}%
\fi%
}%

\let\formatparameter\cmdsyn@parameterFormat%

\newcommand\cmdsyn@parameterNameFormat{%
\ifparameternamerequired%
\RequiredParameterNameFormat{-\theparametername}%
\else%
\OptionalParameterNameFormat{-\theparametername}%
\fi%
}%

\let\formatparametername\cmdsyn@parameterNameFormat%

\newcommand\cmdyn@formatyntax[1]{\texttt{#1}}%

\let\formatsyntax\cmdyn@formatyntax%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                 Strings                                            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand\cmdysn@formatrequiredstring{\textit{(required)}}%
\let\requiredparameterstring\cmdysn@formatrequiredstring%

\newcommand\cmdysn@formataliasstring[1]{Alias: #1}%
\let\parameteraliasstring\cmdysn@formataliasstring%

\newcommand\cmdysn@formatdefaultstring[1]{Default: #1}%
\let\parameterdefaultstring\cmdysn@formatdefaultstring%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                 Aux                                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\cmdsyn@write}[2]{%
	\immediate\write\@auxout{\string\expandafter\gdef\string\csname\space#2\string\endcsname{#1}}%
}%

\def\cmdsyn@writeAux#1#2{%
	\expandafter\cmdsyn@write{#2}{#1}%
}%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                 Commands                                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\NewDocumentCommand{\command}{m o}
{
	%Finish the output of the last item
	\cmdsyn@printpreviouscommand%
	%
	%Reset the prevoius stored values
	%
	\let\cmdsyn@parshort\undefined%
	\let\cmdsyn@parname\undefined%
	\let\cmdsyn@paralias\undefined%
	\let\cmdsyn@pardefault\undefined%
	\cmdsyn@command@nameRequiredtrue%
	%
	%Read the keys from the optional Arguments
	%
	% TODO
	% C	heck ifoptional argument is submitted
	\setkeys[cmdsyn]{command}{#2}%
	%
	\stepcounter{cmdsyn@env@cmd}%
	%
	% Begin the next item
	%
	\item[#1]%
	\ifcmdsyn@command@required%
	\requiredparameterstring
	\fi%
	%
	% Store information for next run
	%
	\cmdsyn@writeAux{cmdsyn@commands@\thecmdsyn@env @\thecmdsyn@env@cmd @name}{#1}%
	%
	\ifcmdsyn@command@nameRequired%
		\cmdsyn@writeAux{cmdsyn@commands@\thecmdsyn@env @\thecmdsyn@env@cmd @nameRequired}{\relax}%
	\fi%
	%
	\ifcmdsyn@command@required%
		\cmdsyn@writeAux{cmdsyn@commands@\thecmdsyn@env @\thecmdsyn@env@cmd @required}{\relax}%
	\fi%
	%
	\ifcsname cmdsyn@parshort\endcsname%
		\cmdsyn@writeAux{cmdsyn@commands@\thecmdsyn@env @\thecmdsyn@env@cmd @short}{\cmdsyn@parshort}%
	\fi%
}%

\newenvironment{cmd}[1]
%BEGIN
{
	\stepcounter{cmdsyn@env}%
	\ifcsname cmdsyn@commands@\thecmdsyn@env @params\endcsname%
		\formatsyntax{\writeSyntax{#1}}%
	\else%
		\typeout{^^J^^J !! Please run LaTeX again to get correct output^^J}%
	\fi%
	\begin{description}%
}
%END
{
	\cmdsyn@printpreviouscommand%
	\end{description}%
	\stepcounter{cmdsyn@env@cmd}%
	\cmdsyn@writeAux{cmdsyn@commands@\thecmdsyn@env  @params}{\thecmdsyn@env@cmd}%
	\setcounter{cmdsyn@env@cmd}{0}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                 Commands  (Internal Helpers)           %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand\writeSyntax[1]{
	#1%
	\setcounter{cmdsyn@cmd}{0}%
%	
	\forloop{cmdsyn@cmd}{1}{\thecmdsyn@cmd<\csname cmdsyn@commands@\thecmdsyn@env @params\endcsname}{%
		\edef\theparametername{\csname cmdsyn@commands@\thecmdsyn@env @\thecmdsyn@cmd @name\endcsname}%
		\ifcsname cmdsyn@commands@\thecmdsyn@env @\thecmdsyn@cmd @short\endcsname%
			\parametershortpresenttrue \else \parametershortpresentfalse \fi%
		\edef\theparametershort{\csname cmdsyn@commands@\thecmdsyn@env @\thecmdsyn@cmd @short\endcsname}%
		\ifcsname cmdsyn@commands@\thecmdsyn@env @\thecmdsyn@cmd @required\endcsname\parameterrequiredtrue\else\parameterrequiredfalse\fi%
		\ifcsname cmdsyn@commands@\thecmdsyn@env @\thecmdsyn@cmd @nameRequired\endcsname\parameternamerequiredtrue\else\parameternamerequiredfalse\fi%
		%\def\ifparameternamerequired\ifcmdsyn@param@namerequired
		\hspace{1ex}\formatparameter%
		\def\theparametername\undefined%
		\def\theparametershort\undefined%
		\def\ifparameterrequired\undefined%
		\def\ifparameternamerequired\undefined%
		\stepcounter{cmdsyn@cmd}%
	}
}


\newcommand\cmdsyn@printpreviouscommand{
\ifcsname cmdsyn@paralias\endcsname%
	\parameteraliasstring{\cmdsyn@paralias}%
\fi%
\ifcsname cmdsyn@pardefault\endcsname%
	\parameterdefaultstring{\cmdsyn@pardefault}%
\fi%
}
